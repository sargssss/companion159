package com.lifelover.companion159.presentation.ui.auth

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.lifelover.companion159.data.remote.auth.SupabaseAuthService
import com.lifelover.companion159.data.sync.AutoSyncManager
import com.lifelover.companion159.network.NetworkMonitor
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

data class AuthState(
    val isAuthenticated: Boolean = false,
    val isOffline: Boolean = false,
    val isLoading: Boolean = false,
    val error: String? = null,
    val userEmail: String? = null,
    val hasExplicitlyLoggedOut: Boolean = false
)

@HiltViewModel
class AuthViewModel @Inject constructor(
    private val authService: SupabaseAuthService,
    private val networkMonitor: NetworkMonitor,
    private val autoSyncManager: AutoSyncManager // –ù–û–í–ò–ô: Inject AutoSyncManager
) : ViewModel() {

    private val _state = MutableStateFlow(AuthState())
    val state: StateFlow<AuthState> = _state.asStateFlow()

    init {
        checkAuthStatus()
        observeNetworkStatus()
    }

    private fun checkAuthStatus() {
        viewModelScope.launch {
            authService.isAuthenticated.collect { isAuth ->
                _state.update { it.copy(
                    isAuthenticated = isAuth,
                    userEmail = authService.getCurrentUser()?.email
                )}
            }
        }
    }

    private fun observeNetworkStatus() {
        viewModelScope.launch {
            networkMonitor.isOnlineFlow.collect { isOnline ->
                _state.update { it.copy(isOffline = !isOnline) }
            }
        }
    }

    fun signIn(email: String, password: String) {
        viewModelScope.launch {
            _state.update { it.copy(isLoading = true, error = null) }

            authService.signIn(email, password)
                .onSuccess {
                    _state.update { it.copy(
                        isLoading = false,
                        isAuthenticated = true,
                        userEmail = email
                    )}

                    // –ù–û–í–ò–ô: –¢—Ä–∏–≥–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É
                    triggerPostLoginSync()
                }
                .onFailure { exception ->
                    _state.update { it.copy(
                        isLoading = false,
                        error = mapError(exception)
                    )}
                }
        }
    }

    fun signUp(email: String, password: String) {
        viewModelScope.launch {
            _state.update { it.copy(isLoading = true, error = null) }

            authService.signUp(email, password)
                .onSuccess {
                    _state.update { it.copy(
                        isLoading = false,
                        error = "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
                    )}
                }
                .onFailure { exception ->
                    _state.update { it.copy(
                        isLoading = false,
                        error = mapError(exception)
                    )}
                }
        }
    }

    fun signInWithGoogle(context: Context) {
        viewModelScope.launch {
            _state.update { it.copy(isLoading = true, error = null) }

            authService.signInWithGoogle(context)
                .onSuccess {
                    _state.update { it.copy(
                        isLoading = false,
                        isAuthenticated = true,
                        userEmail = authService.getCurrentUser()?.email
                    )}

                    // –ù–û–í–ò–ô: –¢—Ä–∏–≥–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google
                    triggerPostLoginSync()
                }
                .onFailure { exception ->
                    _state.update { it.copy(
                        isLoading = false,
                        error = mapError(exception)
                    )}
                }
        }
    }

    /**
     * –ù–û–í–ò–ô: –¢—Ä–∏–≥–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É
     */
    private fun triggerPostLoginSync() {
        viewModelScope.launch {
            try {
                android.util.Log.d("AuthViewModel", "üéâ User logged in - initializing sync")
                // AutoSyncManager –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –æ—Ñ–ª–∞–π–Ω –µ–ª–µ–º–µ–Ω—Ç–∏
                // –∑–∞–≤–¥—è–∫–∏ –Ω–æ–≤—ñ–π –ª–æ–≥—ñ—Ü—ñ onUserAuthenticated()
            } catch (e: Exception) {
                android.util.Log.e("AuthViewModel", "‚ùå Failed to trigger post-login sync", e)
            }
        }
    }

    fun signOut() {
        viewModelScope.launch {
            authService.signOut()
            _state.update { AuthState(
                hasExplicitlyLoggedOut = true,
                isOffline = _state.value.isOffline
            )}
        }
    }

    fun clearLogoutFlag() {
        _state.update { it.copy(hasExplicitlyLoggedOut = false) }
    }

    private fun mapError(exception: Throwable): String {
        return when {
            exception.message?.contains("Invalid login") == true ->
                "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å"
            exception.message?.contains("User already registered") == true ->
                "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π"
            exception.message?.contains("Password") == true ->
                "–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤"
            exception.message?.contains("Google Sign-In failed") == true ->
                "–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google"
            else -> exception.message ?: "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
        }
    }
}