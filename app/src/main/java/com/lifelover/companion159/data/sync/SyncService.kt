package com.lifelover.companion159.data.sync

import android.util.Log
import com.lifelover.companion159.data.local.dao.InventoryDao
import com.lifelover.companion159.data.local.entities.InventoryCategory
import com.lifelover.companion159.data.remote.auth.SupabaseAuthService
import com.lifelover.companion159.data.remote.repository.SupabaseInventoryRepository
import com.lifelover.companion159.data.remote.repository.toEntity
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.withContext
import java.util.Date
import javax.inject.Inject
import javax.inject.Singleton

enum class SyncStatus {
    IDLE,
    SYNCING,
    SUCCESS,
    ERROR,
    OFFLINE
}

@Singleton
class SyncService @Inject constructor(
    private val localDao: InventoryDao,
    private val remoteRepository: SupabaseInventoryRepository,
    private val authService: SupabaseAuthService
) {
    companion object {
        private const val TAG = "SyncService"
    }

    private val _syncStatus = MutableStateFlow(SyncStatus.IDLE)
    val syncStatus: StateFlow<SyncStatus> = _syncStatus.asStateFlow()

    private val _lastSyncTime = MutableStateFlow<Long?>(null)
    val lastSyncTime: StateFlow<Long?> = _lastSyncTime.asStateFlow()

    suspend fun performSync(): Result<Unit> = withContext(Dispatchers.IO) {
        try {
            Log.d(TAG, "üîÑ Starting sync...")
            _syncStatus.value = SyncStatus.SYNCING

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            val userId = authService.getUserId()
            if (userId == null) {
                Log.w(TAG, "‚ùå User not authenticated")
                _syncStatus.value = SyncStatus.ERROR
                return@withContext Result.failure(Exception("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π"))
            }

            Log.d(TAG, "‚úÖ User authenticated: $userId")

            // –ï–¢–ê–ü 1: PUSH - –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            val localItemsNeedingSync = localDao.getItemsNeedingSync()
            Log.d(TAG, "üì§ Local items needing sync: ${localItemsNeedingSync.size}")

            for (localItem in localItemsNeedingSync) {
                Log.d(TAG, "Processing local item: ${localItem.name}, supabaseId: ${localItem.supabaseId}, isDeleted: ${localItem.isDeleted}")

                when {
                    // –ù–æ–≤–∏–π –∑–∞–ø–∏—Å (–Ω–µ–º–∞—î supabaseId) + –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π -> –°–¢–í–û–†–ò–¢–ò –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
                    localItem.supabaseId == null && !localItem.isDeleted -> {
                        Log.d(TAG, "‚ûï CREATING new item on server: ${localItem.name}")
                        val newSupabaseId = remoteRepository.createItem(localItem)
                        if (newSupabaseId != null) {
                            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–∏–π Supabase ID –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∑–∞–ø–∏—Å—ñ
                            localDao.setSupabaseId(localItem.id, newSupabaseId)
                            Log.d(TAG, "‚úÖ Created and linked: ${localItem.name} -> $newSupabaseId")
                        } else {
                            Log.e(TAG, "‚ùå Failed to create: ${localItem.name}")
                        }
                    }

                    // –Ü—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å (—î supabaseId) + –≤–∏–¥–∞–ª–µ–Ω–∏–π -> –í–ò–î–ê–õ–ò–¢–ò –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
                    localItem.supabaseId != null && localItem.isDeleted -> {
                        Log.d(TAG, "üóëÔ∏è DELETING on server: ${localItem.name}")
                        val deleted = remoteRepository.deleteItem(localItem.supabaseId)
                        if (deleted) {
                            localDao.markAsSynced(localItem.id)
                            Log.d(TAG, "‚úÖ Deleted on server: ${localItem.name}")
                        } else {
                            Log.e(TAG, "‚ùå Failed to delete: ${localItem.name}")
                        }
                    }

                    // –Ü—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å (—î supabaseId) + –æ–Ω–æ–≤–ª–µ–Ω–∏–π -> –û–ù–û–í–ò–¢–ò –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
                    localItem.supabaseId != null && !localItem.isDeleted -> {
                        Log.d(TAG, "üìù UPDATING on server: ${localItem.name}")
                        val updated = remoteRepository.updateItem(localItem.supabaseId, localItem)
                        if (updated) {
                            localDao.markAsSynced(localItem.id)
                            Log.d(TAG, "‚úÖ Updated on server: ${localItem.name}")
                        } else {
                            Log.e(TAG, "‚ùå Failed to update: ${localItem.name}")
                        }
                    }

                    // –ù–æ–≤–∏–π –∑–∞–ø–∏—Å —è–∫–∏–π –≤–∏–¥–∞–ª–µ–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–æ -> –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π
                    localItem.supabaseId == null && localItem.isDeleted -> {
                        Log.d(TAG, "üöÆ Marking deleted new item as synced: ${localItem.name}")
                        localDao.markAsSynced(localItem.id)
                    }
                }
            }

            // –ï–¢–ê–ü 2: PULL - –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—É –±–∞–∑—É
            Log.d(TAG, "üì• Fetching items from server...")
            val remoteItems = remoteRepository.getAllItems()
            Log.d(TAG, "üìä Fetched ${remoteItems.size} items from server")

            // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            val allLocalItems = localDao.getAllItems()
            val localItemsBySupabaseId = allLocalItems
                .filter { it.supabaseId != null }
                .associateBy { it.supabaseId!! }

            Log.d(TAG, "üìä Local items with supabaseId: ${localItemsBySupabaseId.size}")

            // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –∑ —Å–µ—Ä–≤–µ—Ä–∞
            for (remoteItem in remoteItems) {
                if (remoteItem.id == null) {
                    Log.w(TAG, "‚ö†Ô∏è Remote item has no ID, skipping")
                    continue
                }

                val existingLocalItem = localItemsBySupabaseId[remoteItem.id]

                when {
                    // –í–ò–ü–ê–î–û–ö 1: –ù–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ —Å–µ—Ä–≤–µ—Ä–∞ - —Å—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
                    existingLocalItem == null -> {
                        if (!remoteItem.isDeleted) {
                            Log.d(TAG, "‚¨áÔ∏è CREATING new local item from server: ${remoteItem.name}")
                            val newEntity = remoteItem.toEntity()
                            localDao.insertItem(newEntity)
                            Log.d(TAG, "‚úÖ Created locally: ${remoteItem.name}")
                        } else {
                            Log.d(TAG, "üö´ Skipping deleted item from server: ${remoteItem.name}")
                        }
                    }

                    // –í–ò–ü–ê–î–û–ö 2: –Ü—Å–Ω—É—é—á–∏–π –µ–ª–µ–º–µ–Ω—Ç –ë–ï–ó –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω - –æ–Ω–æ–≤–ª—é—î–º–æ –∑ —Å–µ—Ä–≤–µ—Ä–∞
                    !existingLocalItem.needsSync -> {
                        if (remoteItem.isDeleted && !existingLocalItem.isDeleted) {
                            Log.d(TAG, "üóëÔ∏è MARKING as deleted (from server): ${remoteItem.name}")
                            localDao.softDeleteItem(existingLocalItem.id)
                        } else if (!remoteItem.isDeleted) {
                            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                            val needsUpdate = existingLocalItem.name != remoteItem.name ||
                                    existingLocalItem.quantity != remoteItem.quantity ||
                                    existingLocalItem.category.name.lowercase() != remoteItem.category.lowercase()

                            if (needsUpdate) {
                                Log.d(TAG, "üìù UPDATING from server: ${remoteItem.name}")
                                localDao.updateFromServer(
                                    supabaseId = remoteItem.id,
                                    name = remoteItem.name,
                                    quantity = remoteItem.quantity,
                                    category = InventoryCategory.valueOf(remoteItem.category.uppercase()),
                                    isDeleted = remoteItem.isDeleted
                                )
                                Log.d(TAG, "‚úÖ Updated from server: ${remoteItem.name}")
                            } else {
                                Log.d(TAG, "üìã No changes needed for: ${remoteItem.name}")
                                // –ü—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
                                localDao.markAsSynced(existingLocalItem.id)
                            }
                        }
                    }

                    // –í–ò–ü–ê–î–û–ö 3: –Ü—Å–Ω—É—é—á–∏–π –µ–ª–µ–º–µ–Ω—Ç –ó –ª–æ–∫–∞–ª—å–Ω–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏ - –∑–∞–ª–∏—à–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏
                    else -> {
                        Log.d(TAG, "‚ö° Keeping local changes for: ${existingLocalItem.name} (server: ${remoteItem.name})")
                        // –õ–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏ –º–∞—é—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç - –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
                    }
                }
            }

            _syncStatus.value = SyncStatus.SUCCESS
            _lastSyncTime.value = System.currentTimeMillis()
            Log.d(TAG, "‚úÖ Sync completed successfully")
            Result.success(Unit)

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Sync failed", e)
            _syncStatus.value = SyncStatus.ERROR
            Result.failure(e)
        }
    }

    suspend fun hasUnsyncedChanges(): Boolean = withContext(Dispatchers.IO) {
        val count = localDao.getItemsNeedingSync().size
        Log.d(TAG, "üìä Unsynced items count: $count")
        count > 0
    }

    fun resetSyncStatus() {
        _syncStatus.value = SyncStatus.IDLE
    }
}