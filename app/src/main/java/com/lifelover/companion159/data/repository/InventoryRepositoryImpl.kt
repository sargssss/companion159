package com.lifelover.companion159.data.repository

import android.util.Log
import com.lifelover.companion159.data.local.dao.InventoryDao
import com.lifelover.companion159.data.local.entities.InventoryCategory
import com.lifelover.companion159.data.sync.AutoSyncManager
import com.lifelover.companion159.domain.models.InventoryItem
import com.lifelover.companion159.domain.models.toDomainModel
import com.lifelover.companion159.domain.models.toEntity
import com.lifelover.companion159.network.NetworkMonitor
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import java.util.Date
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class InventoryRepositoryImpl @Inject constructor(
    private val localDao: InventoryDao,
    private val autoSyncManager: AutoSyncManager,
    private val networkMonitor: NetworkMonitor
) : InventoryRepository {

    companion object {
        private const val TAG = "InventoryRepository"
    }

    // –§–æ–Ω–æ–≤–∏–π scope –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
    private val backgroundScope = CoroutineScope(Dispatchers.IO + SupervisorJob())

    override fun getItemsByCategory(category: InventoryCategory): Flow<List<InventoryItem>> {
        return localDao.getItemsByCategory(category)
            .map { entities -> entities.map { it.toDomainModel() } }
    }

    // –¢–Ü–õ–¨–ö–ò –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ù–û–í–ò–• –∑–∞–ø–∏—Å—ñ–≤
    override suspend fun addItem(item: InventoryItem) {
        Log.d(TAG, "‚ûï CREATING new item: ${item.name}")

        val entity = item.toEntity().copy(
            id = 0, // Room –∑–≥–µ–Ω–µ—Ä—É—î –Ω–æ–≤–∏–π ID
            supabaseId = null, // –ù–æ–≤–∏–π –∑–∞–ø–∏—Å - –Ω–µ–º–∞—î Supabase ID
            needsSync = true,
            lastModified = Date(),
            isDeleted = false
        )

        val insertedId = localDao.insertItem(entity)
        Log.d(TAG, "‚úÖ NEW item created with local ID: $insertedId")

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤ —Ñ–æ–Ω—ñ - –ù–ï –±–ª–æ–∫—É—î UI
        triggerBackgroundSync()
    }

    // –¢–Ü–õ–¨–ö–ò –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ü–°–ù–£–Æ–ß–ò–• –∑–∞–ø–∏—Å—ñ–≤
    override suspend fun updateItem(item: InventoryItem) {
        Log.d(TAG, "üìù UPDATING existing item with ID: ${item.id}, name: ${item.name}")

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å
        val existingItem = localDao.getItemById(item.id)
        if (existingItem == null) {
            Log.e(TAG, "‚ùå Item with ID ${item.id} does NOT exist, cannot update")
            throw IllegalArgumentException("Item with ID ${item.id} does not exist")
        }

        // –ú–ò–¢–¢–Ñ–í–û –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ (UI –≤—ñ–¥—Ä–∞–∑—É –±–∞—á–∏—Ç—å –∑–º—ñ–Ω–∏)
        val updatedRows = localDao.updateItem(
            id = item.id,
            name = item.name.trim(),
            quantity = item.quantity,
            category = item.category
        )

        if (updatedRows > 0) {
            Log.d(TAG, "‚úÖ EXISTING item updated locally (rows: $updatedRows)")
        } else {
            Log.w(TAG, "‚ö†Ô∏è No rows updated for item ID: ${item.id}")
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤ —Ñ–æ–Ω—ñ - –ù–ï –±–ª–æ–∫—É—î UI
        triggerBackgroundSync()
    }

    // –û–ü–¢–ò–ú–Ü–°–¢–ò–ß–ù–ò–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ - –ù–ï –±–ª–æ–∫—É—î UI
    suspend fun updateItemQuantity(itemId: Long, newQuantity: Int) {
        Log.d(TAG, "üî¢ OPTIMISTIC quantity update for item ID: $itemId to $newQuantity")

        val existingItem = localDao.getItemById(itemId)
        if (existingItem == null) {
            Log.e(TAG, "‚ùå Item with ID $itemId does NOT exist")
            return
        }

        // –ú–ò–¢–¢–Ñ–í–û –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ - UI –≤—ñ–¥—Ä–∞–∑—É –±–∞—á–∏—Ç—å –∑–º—ñ–Ω–∏
        val updatedRows = localDao.updateQuantity(itemId, newQuantity)

        if (updatedRows > 0) {
            Log.d(TAG, "‚úÖ Quantity updated locally, triggering background sync")
        } else {
            Log.w(TAG, "‚ö†Ô∏è No rows updated for item ID: $itemId")
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤ —Ñ–æ–Ω—ñ - –ù–ï —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        triggerBackgroundSync()
    }

    // –û–ü–¢–ò–ú–Ü–°–¢–ò–ß–ù–ò–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ - –ù–ï –±–ª–æ–∫—É—î UI
    suspend fun updateItemName(itemId: Long, newName: String) {
        Log.d(TAG, "üìù OPTIMISTIC name update for item ID: $itemId to '$newName'")

        val existingItem = localDao.getItemById(itemId)
        if (existingItem == null) {
            Log.e(TAG, "‚ùå Item with ID $itemId does NOT exist")
            return
        }

        // –ú–ò–¢–¢–Ñ–í–û –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ - UI –≤—ñ–¥—Ä–∞–∑—É –±–∞—á–∏—Ç—å –∑–º—ñ–Ω–∏
        val updatedRows = localDao.updateName(itemId, newName.trim())

        if (updatedRows > 0) {
            Log.d(TAG, "‚úÖ Name updated locally, triggering background sync")
        } else {
            Log.w(TAG, "‚ö†Ô∏è No rows updated for item ID: $itemId")
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤ —Ñ–æ–Ω—ñ - –ù–ï —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        triggerBackgroundSync()
    }

    // –¢–Ü–õ–¨–ö–ò –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ü–°–ù–£–Æ–ß–ò–• –∑–∞–ø–∏—Å—ñ–≤
    override suspend fun deleteItem(id: Long) {
        Log.d(TAG, "üóëÔ∏è DELETING existing item with ID: $id")

        // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Å –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        val existingItem = localDao.getItemById(id)
        if (existingItem == null) {
            Log.w(TAG, "‚ö†Ô∏è Item with ID $id does NOT exist, cannot delete")
            return
        }

        Log.d(TAG, "üóëÔ∏è Deleting item: ${existingItem.name}, supabaseId: ${existingItem.supabaseId}")

        // –ú–ò–¢–¢–Ñ–í–û –≤–∏–¥–∞–ª—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ - UI –≤—ñ–¥—Ä–∞–∑—É –±–∞—á–∏—Ç—å –∑–º—ñ–Ω–∏
        val deletedRows = localDao.softDeleteItem(id)

        if (deletedRows > 0) {
            Log.d(TAG, "‚úÖ Item marked as deleted locally, triggering background sync")
        } else {
            Log.w(TAG, "‚ö†Ô∏è No rows updated for item ID: $id")
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤ —Ñ–æ–Ω—ñ - –ù–ï —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        triggerBackgroundSync()
    }

    override suspend fun syncWithServer(): SyncResult {
        Log.d(TAG, "üîÑ Manual sync requested")
        return try {
            autoSyncManager.triggerImmediateSync()
            SyncResult.Success
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Manual sync failed", e)
            when {
                !networkMonitor.isOnline -> SyncResult.NetworkError
                else -> SyncResult.Error(e.message ?: "Unknown sync error")
            }
        }
    }

    override suspend fun hasUnsyncedChanges(): Boolean {
        val hasChanges = localDao.getItemsNeedingSync().isNotEmpty()
        Log.d(TAG, "üìä Has unsynced changes: $hasChanges")
        return hasChanges
    }

    /**
     * –ö–õ–Æ–ß–û–í–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –§–æ–Ω–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è UI
     */
    private fun triggerBackgroundSync() {
        Log.d(TAG, "üîÑ Triggering background sync (non-blocking)")

        if (networkMonitor.isOnline) {
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –≤ —Ñ–æ–Ω–æ–≤–æ–º—É scope - –ù–ï –±–ª–æ–∫—É—î UI
            backgroundScope.launch {
                try {
                    Log.d(TAG, "üì° Starting background sync...")
                    autoSyncManager.triggerImmediateSync()
                    Log.d(TAG, "‚úÖ Background sync completed")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Background sync failed", e)
                    // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó UI –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–∏–º
                }
            }
        } else {
            Log.d(TAG, "üì¥ Device is offline, sync will happen when online")
        }
    }
}